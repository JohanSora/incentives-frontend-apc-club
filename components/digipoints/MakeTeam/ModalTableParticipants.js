import { useTranslation } from "react-i18next";
import { AiFillInfoCircle, AiFillDelete } from "react-icons/ai";

const ModalTableParticipants = ({ dataUsers, handleInputChange }) => {
  const [t, i18n] = useTranslation("global");

  return (
    <div className="w-full">
      <div className="overflow-x-auto">
        <table
          className="w-full text-sm text-left text-black-500 tableJustify table-fixed overflow-hidden"
          style={{ borderRadius: "10px" }}
        >
          <thead className="rounded h-12 bg-[#232B2F] text-xs text-[#F5F5F5] gap-1 ">
            <th scope="col" className="py-5 px-6">
              {t("user.nombre")}
            </th>
            <th scope="col" className="py-5 px-6">
              {t("tabla.correo")}
            </th>
            <th scope="col" className="py-5 px-6">
              {t("modalEquipos.pDeParticipacion")}
            </th>
            <th scope="col" className="py-2 px-6">
              <svg
                width="20"
                height="20"
                viewBox="0 0 20 20"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                className="ml-auto"
              >
                <path
                  d="M10 2.1875C5.69219 2.1875 2.1875 5.69219 2.1875 10C2.1875 14.3078 5.69219 17.8125 10 17.8125C14.3078 17.8125 17.8125 14.3078 17.8125 10C17.8125 5.69219 14.3078 2.1875 10 2.1875ZM10 5.39062C10.2009 5.39062 10.3972 5.45019 10.5643 5.56179C10.7313 5.67339 10.8614 5.83201 10.9383 6.01759C11.0152 6.20317 11.0353 6.40738 10.9961 6.60439C10.9569 6.8014 10.8602 6.98237 10.7182 7.12441C10.5761 7.26644 10.3952 7.36317 10.1981 7.40236C10.0011 7.44155 9.79692 7.42144 9.61134 7.34457C9.42576 7.26769 9.26714 7.13752 9.15554 6.9705C9.04394 6.80348 8.98438 6.60712 8.98438 6.40625C8.98438 6.13689 9.09138 5.87856 9.28184 5.68809C9.47231 5.49763 9.73064 5.39062 10 5.39062ZM11.875 14.2188H8.4375C8.27174 14.2188 8.11277 14.1529 7.99556 14.0357C7.87835 13.9185 7.8125 13.7595 7.8125 13.5938C7.8125 13.428 7.87835 13.269 7.99556 13.1518C8.11277 13.0346 8.27174 12.9688 8.4375 12.9688H9.53125V9.53125H8.90625C8.74049 9.53125 8.58152 9.4654 8.46431 9.34819C8.3471 9.23098 8.28125 9.07201 8.28125 8.90625C8.28125 8.74049 8.3471 8.58152 8.46431 8.46431C8.58152 8.3471 8.74049 8.28125 8.90625 8.28125H10.1562C10.322 8.28125 10.481 8.3471 10.5982 8.46431C10.7154 8.58152 10.7812 8.74049 10.7812 8.90625V12.9688H11.875C12.0408 12.9688 12.1997 13.0346 12.3169 13.1518C12.4342 13.269 12.5 13.428 12.5 13.5938C12.5 13.7595 12.4342 13.9185 12.3169 14.0357C12.1997 14.1529 12.0408 14.2188 11.875 14.2188Z"
                  fill="#F5F5F5"
                />
              </svg>
            </th>
          </thead>
          {dataUsers.length !== 0 && (
            <tbody className="min-h-[15rem]">
              {dataUsers.map((item, index) => (
                <tr className={index % 2 !== 0 ? "bg-[#F5F5F5]" : "bg-white"}>
                  <td className="py-3">{item.name}</td>
                  <td className="py-3">{item.email}</td>
                  <td className="py-3">
                    <input
                      type="number"
                      className={`"input input-info ${
                        index % 2 === 0 ? "bg-[#F5F5F5]" : "bg-white"
                      } input-xs w-1/4 text-center overflow-hidden"`}
                      style={{ borderRadius: "5px" }}
                      defaultValue={item.percentage}
                      onChange={(e) => handleInputChange(e, item.id)}
                    />
                  </td>
                  <td>
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 18 18"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                      className="ml-auto cursor-pointer"
                    >
                      <path
                        d="M15.0043 3.33435H11.67V2.50076C11.67 2.13229 11.5236 1.77892 11.2631 1.51837C11.0025 1.25782 10.6491 1.11145 10.2807 1.11145H7.50204C7.13358 1.11145 6.7802 1.25782 6.51965 1.51837C6.25911 1.77892 6.11273 2.13229 6.11273 2.50076V3.33435H2.77838C2.63099 3.33435 2.48964 3.3929 2.38542 3.49712C2.28121 3.60134 2.22266 3.74269 2.22266 3.89008C2.22266 4.03746 2.28121 4.17881 2.38542 4.28303C2.48964 4.38725 2.63099 4.4458 2.77838 4.4458H3.36884L4.02876 15.0365C4.07808 15.9691 4.79288 16.6718 5.69594 16.6718H12.0868C12.9943 16.6718 13.6949 15.9847 13.754 15.0393L14.4139 4.4458H15.0043C15.1517 4.4458 15.2931 4.38725 15.3973 4.28303C15.5015 4.17881 15.5601 4.03746 15.5601 3.89008C15.5601 3.74269 15.5015 3.60134 15.3973 3.49712C15.2931 3.3929 15.1517 3.33435 15.0043 3.33435ZM6.68825 14.4489H6.66846C6.52444 14.4489 6.38601 14.3931 6.28234 14.2931C6.17867 14.1932 6.11786 14.0569 6.11273 13.9129L5.83487 6.13277C5.82962 5.98539 5.88313 5.84195 5.98364 5.73402C6.08414 5.62609 6.22341 5.5625 6.3708 5.55725C6.51818 5.552 6.66162 5.60551 6.76955 5.70602C6.87748 5.80653 6.94107 5.94579 6.94632 6.09318L7.22418 13.8733C7.22683 13.9463 7.21506 14.0191 7.18955 14.0876C7.16404 14.156 7.12529 14.2187 7.07552 14.2722C7.02575 14.3256 6.96592 14.3688 6.89947 14.3991C6.83302 14.4294 6.76125 14.4463 6.68825 14.4489ZM9.44708 13.8931C9.44708 14.0405 9.38853 14.1819 9.28431 14.2861C9.1801 14.3903 9.03874 14.4489 8.89136 14.4489C8.74397 14.4489 8.60262 14.3903 8.4984 14.2861C8.39418 14.1819 8.33563 14.0405 8.33563 13.8931V6.11298C8.33563 5.96559 8.39418 5.82424 8.4984 5.72002C8.60262 5.6158 8.74397 5.55725 8.89136 5.55725C9.03874 5.55725 9.1801 5.6158 9.28431 5.72002C9.38853 5.82424 9.44708 5.96559 9.44708 6.11298V13.8931ZM10.5585 3.33435H7.22418V2.50076C7.22376 2.46416 7.23066 2.42784 7.24448 2.39394C7.2583 2.36003 7.27875 2.32924 7.30463 2.30335C7.33052 2.27747 7.36132 2.25701 7.39522 2.2432C7.42912 2.22938 7.46544 2.22248 7.50204 2.2229H10.2807C10.3173 2.22248 10.3536 2.22938 10.3875 2.2432C10.4214 2.25701 10.4522 2.27747 10.4781 2.30335C10.504 2.32924 10.5244 2.36003 10.5382 2.39394C10.5521 2.42784 10.559 2.46416 10.5585 2.50076V3.33435ZM11.67 13.9129C11.6649 14.0569 11.604 14.1932 11.5004 14.2931C11.3967 14.3931 11.2583 14.4489 11.1143 14.4489H11.0941C11.0211 14.4463 10.9494 14.4293 10.883 14.399C10.8166 14.3686 10.7568 14.3255 10.7071 14.2721C10.6573 14.2186 10.6186 14.1559 10.5931 14.0875C10.5676 14.0191 10.5559 13.9463 10.5585 13.8733L10.8364 6.09318C10.839 6.0202 10.8559 5.94845 10.8863 5.88202C10.9166 5.81559 10.9597 5.75579 11.0132 5.70602C11.0666 5.65625 11.1293 5.6175 11.1977 5.59198C11.2662 5.56645 11.3389 5.55465 11.4119 5.55725C11.4849 5.55985 11.5566 5.5768 11.6231 5.60713C11.6895 5.63746 11.7493 5.68058 11.7991 5.73402C11.8488 5.78746 11.8876 5.85018 11.9131 5.9186C11.9386 5.98702 11.9504 6.05979 11.9478 6.13277L11.67 13.9129Z"
                        fill="#BDBDBD"
                      />
                    </svg>
                  </td>
                </tr>
              ))}
            </tbody>
          )}
        </table>
        {dataUsers.length === 0 && (
          <div className="border border-color">
            <div className="w-full flex justify-center mt-16">
              <img src="/assets/Icons/no_agregados.png" alt="noAgregados" />
            </div>
            <div className="w-full flex justify-center mt-6 text-[#333333] text-sm">
              <span>{t("modalEquipos.pDeParticipacion")}</span>
            </div>
            <div className="w-full flex justify-center mt-2 mb-16">
              <p className="text-[#2C2C2C] text-xs font-normal w-7/12 text-center">
                {t("modalEquipos.lUsuarios")}
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ModalTableParticipants;
